package com.shiliu.game.controller;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSON;
import com.shiliu.game.common.FlowOperator;
import com.shiliu.game.domain.ExcelUser;
import com.shiliu.game.domain.GameExcel;
import com.shiliu.game.domain.bean.FlowResult;
import com.shiliu.game.domain.bean.PlayGameBean;
import com.shiliu.game.service.IExcelUserService;
import com.shiliu.game.service.IGameExcelService;
/**
 * 用户流量充值控制器
 * @author Administrator
 *
 */
@Controller
@RequestMapping("clientFolw")
public class ClientFolwController {
	Logger logger = Logger.getLogger(this.getClass());
	@Resource
	private IExcelUserService excelUserService;
	@Resource IGameExcelService gameExcelService;
	@RequestMapping(value="/folwview")
	public String folw(@ModelAttribute PlayGameBean playGameBean,ModelMap modelMap ,HttpSession session){
		
		session.setAttribute("openid", playGameBean.getOpenId());
		session.setAttribute("gameid", playGameBean.getGameId());
		GameExcel gameExcel = gameExcelService.selectByPrimaryKey(playGameBean.getGameId());
		if (gameExcel!=null) {
			session.setAttribute("flowValue", gameExcel.getFlux());
			return "/client/FlowOperatorUser";
		}
		return "error1";
	}
	@RequestMapping(value="/flowOperator")
	@ResponseBody
	public String flowOperator(String lab1,String lab2,String lab3,HttpSession session){
		Map<String,String> map = new HashMap<String,String>();
		if(lab1!=null&&lab2!=null&&lab3!=null){
			ExcelUser user = new ExcelUser();
			user.setLab1(lab1);
			user.setLab2(lab2);
			user.setLab3(lab3);
			ExcelUser selectUser = excelUserService.selectUser(user);
			if (selectUser!=null) {
				String gameid = (String) session.getAttribute("gameid");
				String openid = (String) session.getAttribute("openid");
				String flowValue = (String) session.getAttribute("flowValue");
				if (gameid!=null&&openid!=null&&flowValue!=null) {
					FlowResult flow = FlowOperator.hlenFlow(gameid, flowValue, openid);
					logger.info(flow.getMsg()+flow.getCode());
					if (flow.getCode()==0) {
						selectUser.setOpenId(gameid);
						selectUser.setState("1");
						DateFormat sdf = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss"); 
						String format = sdf.format(new Date());
						selectUser.setRechargeTime(format);
						excelUserService.updateByPrimaryKeySelective(selectUser);
						map.put("code","0");
						map.put("message", "流量充值成功");
					}else if(flow.getCode()==1){
						map.put("code","1");
						map.put("message", "未绑定手机");
					}else {
						map.put("code",Integer.toString(flow.getCode()));
						map.put("message", flow.getMsg());
					}
				}else{					
					map.put("code","105");
					map.put("message", "充值参数报错");
				}
			}else{	
				map.put("code","106");
				map.put("message", "该用户未注册");
			}
		}else {			
			map.put("code","107");
			map.put("message", "lab值缺失或不合法");
		}
		return JSON.toJSONString(map);
	}
}
